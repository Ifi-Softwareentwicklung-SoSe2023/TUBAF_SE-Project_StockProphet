@startuml Project Model Class Diagram

skin rose

title Stock Prophet Class Diagram


package StockProphetLib {

    class StockProphet {
        -Articles: List<Article>
        -Handlers: List<IArticleHandler>
        +StockProphet(string modelPath)
        +Prophesy(string keyword): float
        -CreateArticles(string[], string): void
        -StartTasks(): Task[]
        -StatusLoop(Task[], Terminal): void
        -SumSentiment(): float
    }
    StockProphet --> WebCollectorLib.LinkCollector
    StockProphet --> Collector
    StockProphet --> PreProcessor
    StockProphet --> Evaluator
    

    interface IArticleHandler {
        +Run(Article): void
    }


    class Collector {
        -paragraphCollector: ParagraphCollector
        +Run(Article): void
    }
    Collector --|> IArticleHandler
    Collector --> WebCollectorLib.ParagraphCollector
    

    class PreProcessor {
        +Run(Article): void
    }
    PreProcessor --|> IArticleHandler
    PreProcessor --> WebCollectorLib.ContentFilter


    class Evaluator {
        -sentimentEvaluator: ISentiment
        +Evaluator(string modelPath)
        +Run(Article): void
        -EvaluateParagraph(string): float
    }
    Evaluator --|> IArticleHandler
    Evaluator --> SentimentEvalLib.ISentiment


    class Article {
        +ID: int
        +Keyword: string
        +Link: string
        +Paragraphs: List<string>
        +Sentiment: float
    }


    class Terminal {
        -Articles: List<Article>
        +PrintStatus(): void
        +PrintResult(): void
        -SetColorByValue(): void
        -ResetColor(): void
    }
}


package WebCollectorLib 
{
    class LinkCollector {
        -Keyword: string
        -_rawCollector: RawCollector
        -_websiteParser: IWebsiteParser
        +LinkCollector(IWebsiteParser)
        +FindLinks(keyword: string): string[]
    }
    LinkCollector --> RawCollector
    LinkCollector --> WebsiteParser_1


    class ParagraphCollector {
        -_rawCollector: RawCollector
        -_websiteParser: IWebsiteParser
        +ParagraphCollector(IWebsiteParser)
        +ExtractParagraphsFromLinks(link: string): List<string>
    }
    ParagraphCollector --> RawCollector
    ParagraphCollector --> WebsiteParser_1


    class RawCollector {
      -_client: HttpClient
      +RawCollector()
      +DownloadRawHtml(url: string): string
    }


    interface IWebsiteParser {
        +BuildLinkPath(string): string
        +FindLinks(string): Link<string>
        +FindParagraphs(string): Link<string>
    }

    class WebsiteParser_1 {
        -DescendantTag: string
        -AnchorTag: string
        +WebsiteParser_1()
        +BuildLinkPath(string): string
        +FindLinks(htmlContent: string): List<string>
        +FindParagraphs(htmlContent: string): List<string>
    }
    WebsiteParser_1 --|> IWebsiteParser
    

    class ContentFilter {
        {static} +removeLines()
        {static} +replaceName()
    }
}

package SentimentEvalLib 
{
    interface ISentiment {
        +LoadModel(string Path): void
        +Evaluate(SentimentData Data): SentimentPrediction
    }

    interface ISentimentTrain {
        +TrainModel(string Path): void
        +SaveModel(string Path): void
    }
    
    class SentimentEvaluator {
        -MlContext: MLContext
        -Schema: DataViewSchema
        -Model: ITransformer
        -InferenceFunction: PredictionEngine<,>
    }
    SentimentEvaluator --|> ISentiment
    SentimentEvaluator --|> ISentimentTrain

    class SentimentData {
        +Text: string
        +Sentiment: bool
    }

    class SentimentPrediction {
        +Prediction: bool
        +Probability: float
    }
    SentimentPrediction --|> SentimentData
}


@enduml
