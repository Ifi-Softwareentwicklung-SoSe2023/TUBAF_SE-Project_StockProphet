@startuml Project Model Class Diagram

skin rose

title Stock Prophet Application


package StockProphetLib {

    class StockProphet {
        -Terminal: Terminal
        -Links: List<string>
        -LinkCollector: LinkCollector
        -Handlers: IArticleHandler
        +Prophesy(string keyword): void
        -StartTasks(): void
    }
    StockProphet <--> WebCollectorLib.LinkCollector
    StockProphet --> Collector
    StockProphet --> PreProcessor
    StockProphet --> Evaluator
    

    interface IArticleHandler {
        +Run(Article): void
    }


    class Collector {
        -ContentCollector: ContentCollector
        -GetLinks(): void
        -GetArticles(): void
    }
    Collector --|> IArticleHandler
    Collector --> WebCollectorLib.ContentCollector
    

    class PreProcessor {
        -RemoveAuthors(): void
        -ContentFilter: ContentFilter
    }
    PreProcessor --|> IArticleHandler
    PreProcessor --> WebCollectorLib.ContentFilter

    class Evaluator {
        -SentimentEval: ISentiment
        -EvaluateParagraph(string): float
    }
    Evaluator --|> IArticleHandler
    Evaluator --> SentimentEvalLib.ISentiment


    class Article {
        +ID: int
        +Link: string
        +Title: string
        +Content: string
    }


    class Terminal {
        -StatusTemplate: string
        +PrintStatus(): void
        -ResultTemplate: string
        +PrintResult(): void
    }
}


package WebCollectorLib 
{
    class LinkCollector {
    
        -Keyword: string
        +DownloadLinks(articleUrl: string): async Task<string[]>

        
    }

    class ContentCollector {
        +ExtractParagraphsFromLinks(links: string[]): async Task
        -ExtractParagraphsFromLink(link): async Task<List<>>
        +Download(string Link): string
        +public async Task ExtractParagraphsFromLinks()
         
    }
    class pathToLinks {
        +Website1_Link(): ArrayList<Links>
        +Website2_Link(): ArrayList<Links>
        +Website3_Link(): ArrayList<Links>
    }
    
    class pathToText {
        +Website1_Text(): downloading_Text
        +Website2_Text(): downloading_Text
        +Website3_Text(): downloading_Text
    }

    class ContentFilter {
        -Author_deletion()
        -Special_character_deletion()
    }
    pathToText --> ContentFilter
    
    
    pathToLinks --> ContentCollector
    LinkCollector --> ContentCollector
    LinkCollector --> pathToLinks
    ContentCollector --> pathToText

}


package SentimentEvalLib 
{
    interface ISentiment {
        +LoadModel(string Path): void
        +Evaluate(SentimentData): SentimentPrediction
    }

    interface ISentimentTrain {
        +LoadData(string Path): void
        +CreateModel(): void
        +Fit(): void
        +Test(): void
        +SaveModel(string Path):void
    }
    
    class SentimentEvaluator {
        -MlContext: MLContext
        -SplitDataView: TrainTestData
        -Model: ITransformer
    }
    SentimentEvaluator --|> ISentiment
    SentimentEvaluator --|> ISentimentTrain

    class SentimentData {
        +Text: string
        +Sentiment: bool
    }

    class SentimentPrediction {
        +Prediction: bool
        +Probability: float
    }
    SentimentPrediction --|> SentimentData
}

@enduml
